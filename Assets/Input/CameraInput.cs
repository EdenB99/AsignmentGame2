//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/CameraInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CameraInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CameraInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CameraInput"",
    ""maps"": [
        {
            ""name"": ""Camera"",
            ""id"": ""d1a35b4d-25e6-4b24-9868-0ec2958e02a5"",
            ""actions"": [
                {
                    ""name"": ""Input5"",
                    ""type"": ""Button"",
                    ""id"": ""b6114009-6139-4e8f-ac64-cbca3bbd9e67"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Input4"",
                    ""type"": ""Button"",
                    ""id"": ""03675a50-f0d4-42ab-9fab-04d6f4bca60f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Input3"",
                    ""type"": ""Button"",
                    ""id"": ""69a2c3fd-7348-4fc0-8f5e-b4691f47a60e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Input2"",
                    ""type"": ""Button"",
                    ""id"": ""a65e95e3-37e9-4298-84d1-3c8b302bf8fa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Input1"",
                    ""type"": ""Button"",
                    ""id"": ""f673b99e-cda8-4bff-919a-ffcc2d4e251e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2b4461a1-9433-453b-87cf-ca0ad77a5691"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KM"",
                    ""action"": ""Input1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a1c1cf89-6179-4ba7-8bab-858625f01d05"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KM"",
                    ""action"": ""Input2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e7fdbdf-8ed8-4b04-9727-301e6f8d1cdf"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KM"",
                    ""action"": ""Input3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aca324a5-b75e-436c-b4ee-150020aa3620"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KM"",
                    ""action"": ""Input4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d074602-be4f-486d-8493-40d07b7516b7"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KM"",
                    ""action"": ""Input5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KM"",
            ""bindingGroup"": ""KM"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_Input5 = m_Camera.FindAction("Input5", throwIfNotFound: true);
        m_Camera_Input4 = m_Camera.FindAction("Input4", throwIfNotFound: true);
        m_Camera_Input3 = m_Camera.FindAction("Input3", throwIfNotFound: true);
        m_Camera_Input2 = m_Camera.FindAction("Input2", throwIfNotFound: true);
        m_Camera_Input1 = m_Camera.FindAction("Input1", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Camera
    private readonly InputActionMap m_Camera;
    private List<ICameraActions> m_CameraActionsCallbackInterfaces = new List<ICameraActions>();
    private readonly InputAction m_Camera_Input5;
    private readonly InputAction m_Camera_Input4;
    private readonly InputAction m_Camera_Input3;
    private readonly InputAction m_Camera_Input2;
    private readonly InputAction m_Camera_Input1;
    public struct CameraActions
    {
        private @CameraInput m_Wrapper;
        public CameraActions(@CameraInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Input5 => m_Wrapper.m_Camera_Input5;
        public InputAction @Input4 => m_Wrapper.m_Camera_Input4;
        public InputAction @Input3 => m_Wrapper.m_Camera_Input3;
        public InputAction @Input2 => m_Wrapper.m_Camera_Input2;
        public InputAction @Input1 => m_Wrapper.m_Camera_Input1;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void AddCallbacks(ICameraActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraActionsCallbackInterfaces.Add(instance);
            @Input5.started += instance.OnInput5;
            @Input5.performed += instance.OnInput5;
            @Input5.canceled += instance.OnInput5;
            @Input4.started += instance.OnInput4;
            @Input4.performed += instance.OnInput4;
            @Input4.canceled += instance.OnInput4;
            @Input3.started += instance.OnInput3;
            @Input3.performed += instance.OnInput3;
            @Input3.canceled += instance.OnInput3;
            @Input2.started += instance.OnInput2;
            @Input2.performed += instance.OnInput2;
            @Input2.canceled += instance.OnInput2;
            @Input1.started += instance.OnInput1;
            @Input1.performed += instance.OnInput1;
            @Input1.canceled += instance.OnInput1;
        }

        private void UnregisterCallbacks(ICameraActions instance)
        {
            @Input5.started -= instance.OnInput5;
            @Input5.performed -= instance.OnInput5;
            @Input5.canceled -= instance.OnInput5;
            @Input4.started -= instance.OnInput4;
            @Input4.performed -= instance.OnInput4;
            @Input4.canceled -= instance.OnInput4;
            @Input3.started -= instance.OnInput3;
            @Input3.performed -= instance.OnInput3;
            @Input3.canceled -= instance.OnInput3;
            @Input2.started -= instance.OnInput2;
            @Input2.performed -= instance.OnInput2;
            @Input2.canceled -= instance.OnInput2;
            @Input1.started -= instance.OnInput1;
            @Input1.performed -= instance.OnInput1;
            @Input1.canceled -= instance.OnInput1;
        }

        public void RemoveCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraActions @Camera => new CameraActions(this);
    private int m_KMSchemeIndex = -1;
    public InputControlScheme KMScheme
    {
        get
        {
            if (m_KMSchemeIndex == -1) m_KMSchemeIndex = asset.FindControlSchemeIndex("KM");
            return asset.controlSchemes[m_KMSchemeIndex];
        }
    }
    public interface ICameraActions
    {
        void OnInput5(InputAction.CallbackContext context);
        void OnInput4(InputAction.CallbackContext context);
        void OnInput3(InputAction.CallbackContext context);
        void OnInput2(InputAction.CallbackContext context);
        void OnInput1(InputAction.CallbackContext context);
    }
}
